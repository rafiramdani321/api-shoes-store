// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  role_id     String
  image_url   String?
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  role Role @relation(fields: [role_id], references: [id], onDelete: Restrict)

  Session           Session[]
  TokenVerification TokenVerification[]
}

model Session {
  id            String   @id @default(uuid())
  user_id       String
  refresh_token String?
  device_hash   String
  user_agent    String?
  ip_address    String?
  token_version Int      @default(1)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, device_hash])
}

model TokenVerification {
  id         String      @id @default(uuid())
  token      String      @unique
  user_id    String
  status     statusToken @default(ACTIVE)
  expires_at DateTime
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([token])
}

enum statusToken {
  EXPIRED
  ACTIVE
  USED
}

model Role {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User           User[]
  RolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  module         String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  RolePermission RolePermission[]
}

model RolePermission {
  id            String   @id @default(uuid())
  role_id       String
  permission_id String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
}

model Size {
  id          String        @id @default(uuid())
  size        String        @unique
  created_at  DateTime      @default(now())
  created_by  String
  updated_by  String?
  updated_at  DateTime      @updatedAt
  ProductSize ProductSize[]
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  slug       String   @unique
  created_by String
  updated_by String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  category_id String
  created_by  String
  updated_by  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  Product  Product[]
}

model ProductSize {
  id         String @id @default(uuid())
  product_id String
  size_id    String
  stock      Int

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [size_id], references: [id])

  @@unique([product_id, size_id])
}

model ProductImage {
  id         String @id @default(uuid())
  product_id String
  url        String

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Product {
  id             String   @id @default(uuid())
  title          String
  slug           String   @unique
  description    String
  price          Int
  is_active      Boolean
  category_id    String
  subcategory_id String
  created_by     String
  updated_by     String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  category     Category       @relation(fields: [category_id], references: [id], onDelete: Restrict)
  sub_category SubCategory    @relation(fields: [subcategory_id], references: [id], onDelete: Restrict)
  ProductSize  ProductSize[]
  ProductImage ProductImage[]
}
